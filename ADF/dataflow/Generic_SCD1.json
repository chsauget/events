{
	"name": "Generic_SCD1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ABFS_Dyn",
						"type": "DatasetReference"
					},
					"name": "SrcGeneric"
				},
				{
					"dataset": {
						"referenceName": "SQL_Generic",
						"type": "DatasetReference"
					},
					"name": "DimGeneric"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQL_Generic",
						"type": "DatasetReference"
					},
					"name": "sinkDimGeneric"
				}
			],
			"transformations": [
				{
					"name": "DrvHash",
					"description": "Creating/updating the columns 'HashedColumns'\n\nsha2(256,columns()) could be used"
				},
				{
					"name": "LKPExists"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "AlterRowUpsert"
				},
				{
					"name": "SelectDimKeys"
				}
			],
			"script": "parameters{\n\tcolumns as string ('ProductNumber,ProductName,Color,StandardCost,ListPrice,Size'),\n\tBusinessKey as string ('ProductNumber')\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> SrcGeneric\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimGeneric\nSrcGeneric derive(Hash = sha2(256,byNames(split($columns,',')))) ~> DrvHash\nDrvHash, SelectDimKeys lookup(Hash == byName('Hash_dim'),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LKPExists\nLKPExists split(isMatch(),\n\tdisjoint: false) ~> ConditionalSplit1@(ExistingRows, NewOrUpdatedRows)\nConditionalSplit1@NewOrUpdatedRows alterRow(upsertIf(true())) ~> AlterRowUpsert\nDimGeneric select(mapColumn(\n\t\teach(patternMatch(`Hash`),\n\t\t\tconcat($$,'_dim') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimKeys\nAlterRowUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:[($BusinessKey)],\n\tformat: 'table',\n\tmapColumn(\n\t\teach(patternMatch(`^((?!_dim).)*$`))\n\t)) ~> sinkDimGeneric"
		}
	}
}