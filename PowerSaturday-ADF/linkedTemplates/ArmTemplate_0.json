{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "PowerSaturday-ADF"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"SQL_AdventureWork_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQL_AdventureWork'"
		},
		"SQL_PowerSat_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQL_PowerSat'"
		},
		"ABFS_DWH_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://powersaturdayadl.dfs.core.windows.net"
		},
		"HTTP_Azf_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://powersaturdayazf.azurewebsites.net"
		},
		"S3_Lake_properties_typeProperties_accessKeyId": {
			"type": "string",
			"defaultValue": "@{linkedService().S3AccessKeyId}"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Azure Analysis Services - Process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WEB - Get details of a server",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "VAR - Set SSASRestAPIURL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 3,
							"retryIntervalInSeconds": 60,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(variables('SSASRestAPIURL')\n,pipeline().parameters.ApiVersion\n)",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.core.windows.net"
							}
						}
					},
					{
						"name": "VAR - Set Server Capacity",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WEB - Get details of a server",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ServerCapacity",
							"value": {
								"value": "@string(activity('WEB - Get details of a server').output.sku.capacity)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "VAR - Set Server State",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WEB - Get details of a server",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ServerState",
							"value": {
								"value": "@activity('WEB - Get details of a server').output.properties.state",
								"type": "Expression"
							}
						}
					},
					{
						"name": "VAR - Set SSASRestAPIURL",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SSASRestAPIURL",
							"value": {
								"value": "@concat('https://management.azure.com/subscriptions/'\n,pipeline().parameters.SubscriptionId\n,'/resourceGroups/'\n,pipeline().parameters.ResourceGroup\n,'/providers/Microsoft.AnalysisServices/servers/'\n,pipeline().parameters.ServerName)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UNTIL - Server Online",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "IF - Server State is Paused",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ServerState'),'Succeeded')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WEB - Get details of a server - Until",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait - Server Resume",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(variables('SSASRestAPIURL')\n,pipeline().parameters.ApiVersion\n)",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.core.windows.net"
										}
									}
								},
								{
									"name": "VAR - Set Server State - Until",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "WEB - Get details of a server - Until",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ServerState",
										"value": {
											"value": "@activity('WEB - Get details of a server - Until').output.properties.state",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Wait - Server Resume",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								}
							],
							"timeout": "0.00:30:00"
						}
					},
					{
						"name": "UNTIL - Separate Querying Pool",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "IF - QueryPool is not Separated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(equals(variables('QueryPoolSeparated'),'ReadOnly')\n,equals(int(variables('ServerCapacity')),1)\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WEB - Get details of a server - Until separated",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait - QueryPool to be separated",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(variables('SSASRestAPIURL')\n,pipeline().parameters.ApiVersion\n)",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.core.windows.net"
										}
									}
								},
								{
									"name": "VAR - Set Server State - querypoolConnectionMode",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "WEB - Get details of a server - Until separated",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "QueryPoolSeparated",
										"value": {
											"value": "@activity('WEB - Get details of a server - Until separated').output.properties.querypoolConnectionMode",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Wait - QueryPool to be separated",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								}
							],
							"timeout": "0.01:0:00"
						}
					},
					{
						"name": "VAR - Set QueryPoolSeparated",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "UNTIL - Server Online",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "QueryPoolSeparated",
							"value": {
								"value": "@if(greater(int(variables('ServerCapacity')),1)\n,'All'\n,'ReadOnly'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UNTIL - Process End",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "FILTER - Keep processing refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('WEB - Get SSAS Process Status').output.status,'inProgress'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WEB - Get SSAS Process Status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WAIT - End of SSAS process",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(variables('SSASProcessURL')\n,'/'\n,activity('FILTER - Keep processing refresh').output.Value[0].refreshId\n)",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://*.asazure.windows.net"
										}
									}
								},
								{
									"name": "WAIT - End of SSAS process",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 60
									}
								}
							],
							"timeout": "0.01:00:00"
						}
					},
					{
						"name": "VAR - Set SSASProcessURL",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "UNTIL - Separate Querying Pool",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SSASProcessURL",
							"value": {
								"value": "@concat('https://'\n,pipeline().parameters.Region\n,'.asazure.windows.net/servers/'\n,pipeline().parameters.ServerName\n,'/models/'\n,pipeline().parameters.DatabaseName\n,'/refreshes'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WEB - Start SSAS Process",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "VAR - Set SSASProcessURL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@variables('SSASProcessURL')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@pipeline().parameters.TSMLProcess",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net"
							}
						}
					},
					{
						"name": "FILTER - Keep processing refresh",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "WEB - Get Process Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@json(activity('WEB - Get Process Id').output.Response)",
								"type": "Expression"
							},
							"condition": {
								"value": "@greaterOrEquals(item().startTime,addseconds(activity('WEB - Start SSAS Process').output.startTime,-30))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WEB - Get Process Id",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WEB - Start SSAS Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@variables('SSASProcessURL')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net"
							}
						}
					},
					{
						"name": "IF - Process Failed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "UNTIL - Process End",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('WEB - Get SSAS Process Status').output.status,'failed')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "WEB - Throw Error Message on Body",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "http://error",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@string(activity('WEB - Get SSAS Process Status').output)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "UNTIL - QueryPool is All",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "IF - QueryPool is Separated - Regroup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('WEB - Get details of a server - Until All').output.properties.querypoolConnectionMode,'All')\n\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WEB - Get details of a server - Until All",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait - QueryPool - All",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(variables('SSASRestAPIURL')\n,pipeline().parameters.ApiVersion\n)",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.core.windows.net"
										}
									}
								},
								{
									"name": "Wait - QueryPool - All",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								}
							],
							"timeout": "0.01:0:00"
						}
					},
					{
						"name": "IF - QueryPool is Separated - Regroup",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "IF - Process Failed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('QueryPoolSeparated'),'ReadOnly')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "WEB - Group Query Pool",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(variables('SSASRestAPIURL')\n,pipeline().parameters.ApiVersion\n)",
											"type": "Expression"
										},
										"method": "PATCH",
										"headers": {},
										"body": {
											"properties": {
												"querypoolConnectionMode": "All"
											}
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.core.windows.net"
										}
									}
								}
							]
						}
					},
					{
						"name": "IF - QueryPool is not Separated",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VAR - Set QueryPoolSeparated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('QueryPoolSeparated'),'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "WEB - Separate Query Pool",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(variables('SSASRestAPIURL')\n,pipeline().parameters.ApiVersion\n)",
											"type": "Expression"
										},
										"method": "PATCH",
										"headers": {},
										"body": {
											"value": "{\"properties\":{\"querypoolConnectionMode\":\"ReadOnly\"}}",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.core.windows.net"
										}
									}
								}
							]
						}
					},
					{
						"name": "IF - Server State is Paused",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VAR - Set Server Capacity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "VAR - Set Server State",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ServerState'),'Paused')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "WEB - Resume Analysis Services",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(variables('SSASRestAPIURL')\n,'/resume'\n,pipeline().parameters.ApiVersion\n)",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {},
										"body": "'{}'",
										"authentication": {
											"type": "MSI",
											"resource": "https://management.core.windows.net"
										}
									}
								}
							]
						}
					},
					{
						"name": "IF - ServerCapacity not 1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "UNTIL - QueryPool is All",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(variables('ServerCapacity')),1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "WEB - Synchronize Replica",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@replace(variables('SSASProcessURL'),'/refreshes','/sync')",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {},
										"body": "'{}'",
										"authentication": {
											"type": "MSI",
											"resource": "https://*.asazure.windows.net"
										}
									}
								}
							]
						}
					},
					{
						"name": "UNTIL - Synchronization finish",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "IF - ServerCapacity not 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(equals(variables('ServerCapacity'),'1')\n,or(equals(activity('WEB - Get Synchronization Status').output.syncstate,2),equals(activity('WEB - Get Synchronization Status').output.syncstate,3))\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WAIT - Synchronization",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								},
								{
									"name": "IF - ServerCapacity not 1 - Sync",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "WAIT - Synchronization",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(int(variables('ServerCapacity')),1)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "WEB - Get Synchronization Status",
												"type": "WebActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "0.00:15:00",
													"retry": 3,
													"retryIntervalInSeconds": 60,
													"secureOutput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": {
														"value": "@replace(variables('SSASProcessURL'),'/refreshes','/sync')",
														"type": "Expression"
													},
													"method": "GET",
													"headers": {},
													"body": "sync",
													"authentication": {
														"type": "MSI",
														"resource": "https://*.asazure.windows.net"
													}
												}
											}
										]
									}
								}
							],
							"timeout": "0.01:00:00"
						}
					},
					{
						"name": "IF - Server State was paused",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "UNTIL - Synchronization finish",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('WEB - Get details of a server').output.properties.state,'Paused')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "WEB - Pause Analysis Services",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(variables('SSASRestAPIURL')\n,'/Suspend'\n,pipeline().parameters.ApiVersion\n)",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {},
										"body": "'{}'",
										"authentication": {
											"type": "MSI",
											"resource": "https://management.core.windows.net"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SubscriptionId": {
						"type": "string",
						"defaultValue": "xxxxx-xxxx-xxxx-xxxx-xxxxx"
					},
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "MyRG"
					},
					"Region": {
						"type": "string",
						"defaultValue": "northeurope"
					},
					"ServerName": {
						"type": "string",
						"defaultValue": "myssasServer"
					},
					"ApiVersion": {
						"type": "string",
						"defaultValue": "?api-version=2017-08-01"
					},
					"TSMLProcess": {
						"type": "string",
						"defaultValue": {
							"type": "full"
						}
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "MyTabularDB"
					}
				},
				"variables": {
					"SSASRestAPIURL": {
						"type": "String"
					},
					"ServerCapacity": {
						"type": "String"
					},
					"ServerState": {
						"type": "String"
					},
					"QueryPoolSeparated": {
						"type": "String"
					},
					"SSASProcessURL": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABFS_DWH')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ABFS_DWH_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HTTP_Azf')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HTTP_Azf_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/S3_Lake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "AmazonS3",
				"annotations": [],
				"typeProperties": {
					"serviceUrl": "",
					"accessKeyId": "[parameters('S3_Lake_properties_typeProperties_accessKeyId')]",
					"secretAccessKey": "@{linkedService().S3SecretAccessKey}"
				},
				"parameters": {
					"S3AccessKeyId": {
						"type": "String"
					},
					"S3SecretAccessKey": {
						"type": "String"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_AdventureWork')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQL_AdventureWork_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_PowerSat')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQL_PowerSat_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABFS_C02')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ABFS_DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ABFS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "export/satellite_carbon_dioxide.parquet",
						"fileSystem": "datawarehouse"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "latitude",
						"type": "FLOAT"
					},
					{
						"name": "longitude",
						"type": "FLOAT"
					},
					{
						"name": "solar_zenith_angle",
						"type": "FLOAT"
					},
					{
						"name": "sensor_zenith_angle",
						"type": "FLOAT"
					},
					{
						"name": "co2",
						"type": "FLOAT"
					},
					{
						"name": "co2_uncertainty",
						"type": "FLOAT"
					},
					{
						"name": "co2_averaging_kernel",
						"type": "FLOAT"
					},
					{
						"name": "pressure_levels",
						"type": "FLOAT"
					},
					{
						"name": "pressure_weight",
						"type": "FLOAT"
					},
					{
						"name": "layer_dim",
						"type": "INT64"
					},
					{
						"name": "level_dim",
						"type": "INT64"
					},
					{
						"name": "sounding_dim",
						"type": "INT64"
					},
					{
						"name": "datetime",
						"type": "INT96"
					},
					{
						"name": "co2_quality_flag_int",
						"type": "INT32"
					},
					{
						"name": "filename",
						"type": "UTF8"
					},
					{
						"name": "year",
						"type": "INT32"
					},
					{
						"name": "month",
						"type": "INT32"
					},
					{
						"name": "geoKey",
						"type": "UTF8"
					},
					{
						"name": "date",
						"type": "DATE"
					},
					{
						"name": "city",
						"type": "UTF8"
					},
					{
						"name": "countryCode2",
						"type": "UTF8"
					},
					{
						"name": "admin1",
						"type": "UTF8"
					},
					{
						"name": "admin2",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ABFS_DWH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABFS_Dyn')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ABFS_DWH",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ABFS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "AdventureWork",
						"fileSystem": "lake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ABFS_DWH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABFS_Product_Delta')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ABFS_DWH",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"PathDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Dataflow Meetup/ABFS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Product.parquet",
						"folderPath": {
							"value": "@concat('DataflowMeetup/Raw/Product/',dataset().PathDate)",
							"type": "Expression"
						},
						"fileSystem": "lake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ProductID",
						"type": "INT32"
					},
					{
						"name": "Name",
						"type": "UTF8"
					},
					{
						"name": "ProductNumber",
						"type": "UTF8"
					},
					{
						"name": "Color",
						"type": "UTF8"
					},
					{
						"name": "StandardCost",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "UTF8"
					},
					{
						"name": "Weight",
						"type": "DECIMAL",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "INT32"
					},
					{
						"name": "ProductModelID",
						"type": "INT32"
					},
					{
						"name": "SellStartDate",
						"type": "INT96"
					},
					{
						"name": "SellEndDate",
						"type": "INT96"
					},
					{
						"name": "DiscontinuedDate",
						"type": "INT96"
					},
					{
						"name": "ThumbNailPhoto",
						"type": "BINARY"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "UTF8"
					},
					{
						"name": "rowguid",
						"type": "UTF8"
					},
					{
						"name": "ModifiedDate",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ABFS_DWH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABFS_Product_Full')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ABFS_DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataflow Meetup/ABFS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('DataflowMeetup/Staging/Product')",
							"type": "Expression"
						},
						"fileSystem": "lake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ProductID",
						"type": "INT32"
					},
					{
						"name": "Name",
						"type": "UTF8"
					},
					{
						"name": "ProductNumber",
						"type": "UTF8"
					},
					{
						"name": "Color",
						"type": "UTF8"
					},
					{
						"name": "StandardCost",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "UTF8"
					},
					{
						"name": "Weight",
						"type": "DECIMAL",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "INT32"
					},
					{
						"name": "ProductModelID",
						"type": "INT32"
					},
					{
						"name": "SellStartDate",
						"type": "INT96"
					},
					{
						"name": "SellEndDate",
						"type": "INT96"
					},
					{
						"name": "DiscontinuedDate",
						"type": "INT96"
					},
					{
						"name": "ThumbNailPhoto",
						"type": "BINARY"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "UTF8"
					},
					{
						"name": "rowguid",
						"type": "UTF8"
					},
					{
						"name": "ModifiedDate",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ABFS_DWH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABFS_Raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ABFS_DWH",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"PathDate": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Dataflow Meetup/ABFS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().TableName,'.parquet')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('DataflowMeetup/Raw/',dataset().TableName,'/',dataset().PathDate)",
							"type": "Expression"
						},
						"fileSystem": "lake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ABFS_DWH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABFS_SalesOrderDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ABFS_DWH",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"PathDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Dataflow Meetup/ABFS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SalesOrderDetail.parquet",
						"folderPath": {
							"value": "@concat('DataflowMeetup/Raw/SalesOrderDetail/',dataset().PathDate)",
							"type": "Expression"
						},
						"fileSystem": "lake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "INT32"
					},
					{
						"name": "SalesOrderDetailID",
						"type": "INT32"
					},
					{
						"name": "OrderQty",
						"type": "INT32"
					},
					{
						"name": "ProductID",
						"type": "INT32"
					},
					{
						"name": "UnitPrice",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "rowguid",
						"type": "UTF8"
					},
					{
						"name": "ModifiedDate",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ABFS_DWH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABFS_SalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ABFS_DWH",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"PathDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Dataflow Meetup/ABFS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SalesOrderHeader.parquet",
						"folderPath": {
							"value": "@concat('DataflowMeetup/Raw/SalesOrderHeader/',dataset().PathDate)",
							"type": "Expression"
						},
						"fileSystem": "lake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "INT32"
					},
					{
						"name": "RevisionNumber",
						"type": "INT32"
					},
					{
						"name": "OrderDate",
						"type": "INT96"
					},
					{
						"name": "DueDate",
						"type": "INT96"
					},
					{
						"name": "ShipDate",
						"type": "INT96"
					},
					{
						"name": "Status",
						"type": "INT32"
					},
					{
						"name": "OnlineOrderFlag",
						"type": "BOOLEAN"
					},
					{
						"name": "SalesOrderNumber",
						"type": "UTF8"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "UTF8"
					},
					{
						"name": "AccountNumber",
						"type": "UTF8"
					},
					{
						"name": "CustomerID",
						"type": "INT32"
					},
					{
						"name": "ShipToAddressID",
						"type": "INT32"
					},
					{
						"name": "BillToAddressID",
						"type": "INT32"
					},
					{
						"name": "ShipMethod",
						"type": "UTF8"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "UTF8"
					},
					{
						"name": "SubTotal",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Comment",
						"type": "UTF8"
					},
					{
						"name": "rowguid",
						"type": "UTF8"
					},
					{
						"name": "ModifiedDate",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ABFS_DWH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABFS_Staging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ABFS_DWH",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Dataflow Meetup/ABFS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().TableName,'.parquet')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('DataflowMeetup/Staging/',dataset().TableName)",
							"type": "Expression"
						},
						"fileSystem": "lake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ABFS_DWH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobInputFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "DimProducts.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "SampleData/AW",
						"container": "mycontainer"
					},
					"columnDelimiter": "|",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobInputFolder1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "DimProducts.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "SampleData/AW",
						"container": "mycontainer"
					},
					"columnDelimiter": "|",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_DimProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_PowerSat",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataflow Meetup/DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Hash",
						"type": "varchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "ProductName",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_PowerSat')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_FtSalesOrder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_PowerSat",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataflow Meetup/DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OnlineOrderFlag",
						"type": "bit"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "varchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FtSalesOrder"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_PowerSat')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_paramLoadingLastDate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_PowerSat",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataflow Meetup/DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "nvarchar"
					},
					{
						"name": "MaxDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "param_LoadingLastDate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_PowerSat')]"
			]
		}
	]
}